//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/NewInputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""AndroidControls"",
            ""id"": ""1ea6d8e0-343e-4ee2-9bb8-5d587ab4fa8c"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""a76a7ddd-6107-4016-8f47-8156fdc4f32d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleAttack"",
                    ""type"": ""Button"",
                    ""id"": ""dbd3c3de-3a03-4d7b-bdbf-8c2a7e9d675c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSprint"",
                    ""type"": ""Button"",
                    ""id"": ""b607b92f-27ed-4c0a-8d5f-60d2d00c0414"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePauseResume"",
                    ""type"": ""Button"",
                    ""id"": ""7026dc36-6e5b-4667-b2dc-49f27548a60b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1584cf39-fe1f-4781-96de-54658b0ffc57"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64140836-0af0-4f6f-afdf-c4a191c7c6ef"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8c7dfe1-42b8-4d34-977e-382196ac472e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10153c9c-aa46-4448-8ec5-caf4b810baef"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePauseResume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AndroidControls
        m_AndroidControls = asset.FindActionMap("AndroidControls", throwIfNotFound: true);
        m_AndroidControls_Walk = m_AndroidControls.FindAction("Walk", throwIfNotFound: true);
        m_AndroidControls_ToggleAttack = m_AndroidControls.FindAction("ToggleAttack", throwIfNotFound: true);
        m_AndroidControls_ToggleSprint = m_AndroidControls.FindAction("ToggleSprint", throwIfNotFound: true);
        m_AndroidControls_TogglePauseResume = m_AndroidControls.FindAction("TogglePauseResume", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AndroidControls
    private readonly InputActionMap m_AndroidControls;
    private List<IAndroidControlsActions> m_AndroidControlsActionsCallbackInterfaces = new List<IAndroidControlsActions>();
    private readonly InputAction m_AndroidControls_Walk;
    private readonly InputAction m_AndroidControls_ToggleAttack;
    private readonly InputAction m_AndroidControls_ToggleSprint;
    private readonly InputAction m_AndroidControls_TogglePauseResume;
    public struct AndroidControlsActions
    {
        private @PlayerInputActions m_Wrapper;
        public AndroidControlsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_AndroidControls_Walk;
        public InputAction @ToggleAttack => m_Wrapper.m_AndroidControls_ToggleAttack;
        public InputAction @ToggleSprint => m_Wrapper.m_AndroidControls_ToggleSprint;
        public InputAction @TogglePauseResume => m_Wrapper.m_AndroidControls_TogglePauseResume;
        public InputActionMap Get() { return m_Wrapper.m_AndroidControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AndroidControlsActions set) { return set.Get(); }
        public void AddCallbacks(IAndroidControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_AndroidControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AndroidControlsActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @ToggleAttack.started += instance.OnToggleAttack;
            @ToggleAttack.performed += instance.OnToggleAttack;
            @ToggleAttack.canceled += instance.OnToggleAttack;
            @ToggleSprint.started += instance.OnToggleSprint;
            @ToggleSprint.performed += instance.OnToggleSprint;
            @ToggleSprint.canceled += instance.OnToggleSprint;
            @TogglePauseResume.started += instance.OnTogglePauseResume;
            @TogglePauseResume.performed += instance.OnTogglePauseResume;
            @TogglePauseResume.canceled += instance.OnTogglePauseResume;
        }

        private void UnregisterCallbacks(IAndroidControlsActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @ToggleAttack.started -= instance.OnToggleAttack;
            @ToggleAttack.performed -= instance.OnToggleAttack;
            @ToggleAttack.canceled -= instance.OnToggleAttack;
            @ToggleSprint.started -= instance.OnToggleSprint;
            @ToggleSprint.performed -= instance.OnToggleSprint;
            @ToggleSprint.canceled -= instance.OnToggleSprint;
            @TogglePauseResume.started -= instance.OnTogglePauseResume;
            @TogglePauseResume.performed -= instance.OnTogglePauseResume;
            @TogglePauseResume.canceled -= instance.OnTogglePauseResume;
        }

        public void RemoveCallbacks(IAndroidControlsActions instance)
        {
            if (m_Wrapper.m_AndroidControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAndroidControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_AndroidControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AndroidControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AndroidControlsActions @AndroidControls => new AndroidControlsActions(this);
    public interface IAndroidControlsActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnToggleAttack(InputAction.CallbackContext context);
        void OnToggleSprint(InputAction.CallbackContext context);
        void OnTogglePauseResume(InputAction.CallbackContext context);
    }
}
