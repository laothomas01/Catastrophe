//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/NewInputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player_MouseKeyboard"",
            ""id"": ""1ea6d8e0-343e-4ee2-9bb8-5d587ab4fa8c"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""3f6bd082-9645-4386-8449-d83267b1007b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a76a7ddd-6107-4016-8f47-8156fdc4f32d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b951b2dc-9a69-4064-9f8b-c15c1364a295"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36de2201-7068-401f-b3cb-75beeef1ba10"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_MouseKeyboard
        m_Player_MouseKeyboard = asset.FindActionMap("Player_MouseKeyboard", throwIfNotFound: true);
        m_Player_MouseKeyboard_Attack = m_Player_MouseKeyboard.FindAction("Attack", throwIfNotFound: true);
        m_Player_MouseKeyboard_Movement = m_Player_MouseKeyboard.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_MouseKeyboard
    private readonly InputActionMap m_Player_MouseKeyboard;
    private List<IPlayer_MouseKeyboardActions> m_Player_MouseKeyboardActionsCallbackInterfaces = new List<IPlayer_MouseKeyboardActions>();
    private readonly InputAction m_Player_MouseKeyboard_Attack;
    private readonly InputAction m_Player_MouseKeyboard_Movement;
    public struct Player_MouseKeyboardActions
    {
        private @PlayerInputActions m_Wrapper;
        public Player_MouseKeyboardActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Player_MouseKeyboard_Attack;
        public InputAction @Movement => m_Wrapper.m_Player_MouseKeyboard_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Player_MouseKeyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_MouseKeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_MouseKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_MouseKeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_MouseKeyboardActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayer_MouseKeyboardActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayer_MouseKeyboardActions instance)
        {
            if (m_Wrapper.m_Player_MouseKeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_MouseKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_MouseKeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_MouseKeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_MouseKeyboardActions @Player_MouseKeyboard => new Player_MouseKeyboardActions(this);
    public interface IPlayer_MouseKeyboardActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
}
